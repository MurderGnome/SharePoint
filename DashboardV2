<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
				<style>
        * { box-sizing: border-box; }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            padding: 20px;
            margin: 0;
            background: #fafafa;
        }

        .container {
            max-width: 1600px;
            margin: 0 auto;
            background: #fff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
        }

        .title {
            color: #0078d4;
            font-size: 32px;
            margin: 0 0 10px 0;
            font-weight: 600;
        }

        .subtitle {
            color: #666;
            font-size: 16px;
        }

        .control-panel {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 30px;
        }

        .button-group {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            justify-content: center;
            margin-top: 20px;
        }

        .btn {
            padding: 12px 28px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 15px;
            font-weight: 600;
            transition: all 0.3s;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        .btn-primary {
            background: #fff;
            color: #667eea;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
        }

        .btn-secondary {
            background: rgba(255,255,255,0.2);
            color: white;
            border: 2px solid white;
        }

        .btn-secondary:hover {
            background: rgba(255,255,255,0.3);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin: 25px 0;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
        }

        .stat-value {
            font-size: 36px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #666;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            border-bottom: 2px solid #e0e0e0;
            flex-wrap: wrap;
        }

        .tab {
            padding: 12px 24px;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 15px;
            font-weight: 600;
            color: #666;
            border-bottom: 3px solid transparent;
            transition: all 0.3s;
        }

        .tab.active {
            color: #0078d4;
            border-bottom-color: #0078d4;
        }

        .tab:hover {
            color: #0078d4;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .cdn-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }

        .cdn-card {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 18px;
            border-left: 5px solid #999;
            transition: all 0.3s;
            position: relative;
        }

        .cdn-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .cdn-card.pending { border-left-color: #999; background: #f8f9fa; }
        .cdn-card.loading { border-left-color: #ff9800; background: #fff3e0; }
        .cdn-card.success { border-left-color: #4caf50; background: #e8f5e9; }
        .cdn-card.failed { border-left-color: #f44336; background: #ffebee; }

        .cdn-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 10px;
        }

        .cdn-name {
            font-weight: bold;
            font-size: 16px;
            color: #333;
            flex: 1;
        }

        .cdn-badge {
            font-size: 11px;
            padding: 3px 8px;
            border-radius: 12px;
            font-weight: bold;
            text-transform: uppercase;
            margin-left: 8px;
        }

        .badge-workaround { background: #ffc107; color: #000; }
        .badge-alternative { background: #9c27b0; color: white; }
        .badge-new { background: #00bcd4; color: white; }

        .cdn-url {
            font-size: 11px;
            color: #666;
            word-break: break-all;
            font-family: 'Courier New', monospace;
            margin: 8px 0;
            padding: 8px;
            background: rgba(0,0,0,0.05);
            border-radius: 4px;
        }

        .cdn-status {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 6px 14px;
            border-radius: 20px;
            font-size: 13px;
            font-weight: bold;
            margin-top: 10px;
        }

        .status-pending { background: #e0e0e0; color: #666; }
        .status-loading { background: #ff9800; color: white; }
        .status-success { background: #4caf50; color: white; }
        .status-failed { background: #f44336; color: white; }

        .spinner {
            width: 14px;
            height: 14px;
            border: 2px solid rgba(255,255,255,0.3);
            border-top-color: white;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .workaround-section {
            background: #fff9c4;
            border-left: 5px solid #ffc107;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }

        .workaround-title {
            color: #f57c00;
            font-size: 18px;
            font-weight: bold;
            margin: 0 0 15px 0;
        }

        .workaround-item {
            background: white;
            padding: 15px;
            margin: 10px 0;
            border-radius: 6px;
            border-left: 3px solid #ffc107;
        }

        .workaround-item h4 {
            margin: 0 0 8px 0;
            color: #333;
            font-size: 15px;
        }

        .workaround-item p {
            margin: 5px 0;
            color: #666;
            font-size: 14px;
            line-height: 1.5;
        }

        .code-block {
            background: #263238;
            color: #aed581;
            padding: 12px;
            border-radius: 6px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            overflow-x: auto;
            margin: 8px 0;
        }

        .working-list {
            background: #e8f5e9;
            border-left: 5px solid #4caf50;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }

        .working-item {
            background: white;
            padding: 12px;
            margin: 8px 0;
            border-radius: 6px;
            font-family: 'Courier New', monospace;
            font-size: 13px;
            border-left: 3px solid #4caf50;
        }

        .filter-bar {
            display: flex;
            gap: 10px;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 8px 16px;
            border: 2px solid #e0e0e0;
            background: white;
            border-radius: 20px;
            cursor: pointer;
            font-size: 13px;
            transition: all 0.3s;
        }

        .filter-btn.active {
            background: #0078d4;
            color: white;
            border-color: #0078d4;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e0e0e0;
            border-radius: 4px;
            overflow: hidden;
            margin: 20px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            width: 0%;
            transition: width 0.3s;
        }

        .info-box {
            background: #e3f2fd;
            border-left: 5px solid #2196f3;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }

        .info-box h3 {
            margin: 0 0 10px 0;
            color: #1976d2;
        }

        .info-box ul {
            margin: 10px 0;
            padding-left: 20px;
        }

        .info-box li {
            margin: 5px 0;
            color: #555;
        }
    </style>
			</head>
			<body>
				<div class="container">
					<div class="header">
						<h1 class="title">🔬 Advanced SharePoint CDN Testing Lab</h1>
						<p class="subtitle">Comprehensive CDN testing with workarounds and alternatives</p>
					</div>
					<div class="control-panel">
						<h2 style="margin: 0 0 10px 0; font-size: 22px;">Test Control Center</h2>
						<div class="stats-grid">
							<div class="stat-card">
								<div class="stat-value" style="color: #667eea;" id="totalCount">0</div>
								<div class="stat-label">Total Tests</div>
							</div>
							<div class="stat-card">
								<div class="stat-value" style="color: #4caf50;" id="successCount">0</div>
								<div class="stat-label">Working</div>
							</div>
							<div class="stat-card">
								<div class="stat-value" style="color: #f44336;" id="failedCount">0</div>
								<div class="stat-label">Failed</div>
							</div>
							<div class="stat-card">
								<div class="stat-value" style="color: #ff9800;" id="pendingCount">0</div>
								<div class="stat-label">Pending</div>
							</div>
							<div class="stat-card">
								<div class="stat-value" style="color: #00bcd4;" id="successRate">0%</div>
								<div class="stat-label">Success Rate</div>
							</div>
						</div>
						<div class="progress-bar">
							<div class="progress-fill" id="progressBar">
							</div>
						</div>
						<div class="button-group">
							<button class="btn btn-primary" id="testAllBtn">🚀 Test All CDNs</button>
							<button class="btn btn-secondary" id="retryFailedBtn">🔄 Retry Failed</button>
							<button class="btn btn-secondary" id="testWorkaroundsBtn">⚡ Test Workarounds</button>
							<button class="btn btn-secondary" id="resetBtn">↺ Reset</button>
						</div>
					</div>
					<div class="tabs">
						<button class="tab active" data-tab="all">All Tests</button>
						<button class="tab" data-tab="charts">Charts & Viz</button>
						<button class="tab" data-tab="animation">Animation</button>
						<button class="tab" data-tab="utilities">Utilities</button>
						<button class="tab" data-tab="ui">UI Frameworks</button>
						<button class="tab" data-tab="workarounds">Workarounds</button>
					</div>
					<div class="filter-bar">
						<button class="filter-btn active" data-filter="all">All</button>
						<button class="filter-btn" data-filter="success">✅ Working</button>
						<button class="filter-btn" data-filter="failed">❌ Failed</button>
						<button class="filter-btn" data-filter="pending">⏳ Pending</button>
					</div>
					<div id="allTab" class="tab-content active">
						<div class="cdn-grid" id="cdnGrid">
						</div>
					</div>
					<div id="chartsTab" class="tab-content">
						<div class="cdn-grid" id="chartsGrid">
						</div>
					</div>
					<div id="animationTab" class="tab-content">
						<div class="cdn-grid" id="animationGrid">
						</div>
					</div>
					<div id="utilitiesTab" class="tab-content">
						<div class="cdn-grid" id="utilitiesGrid">
						</div>
					</div>
					<div id="uiTab" class="tab-content">
						<div class="cdn-grid" id="uiGrid">
						</div>
					</div>
					<div id="workaroundsTab" class="tab-content">
						<div class="workaround-section">
							<h2 class="workaround-title">💡 Workarounds for Failed CDNs</h2>
							<div class="workaround-item">
								<h4>📊 Chart.js Alternative Methods</h4>
								<p>
								<strong>Method 1:</strong> Try older versions (v2.x or v3.x)</p>
								<div class="code-block">&lt;script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"&gt;&lt;/script&gt;</div>
								<p>
								<strong>Method 2:</strong> Use standalone build instead of UMD</p>
								<div class="code-block">&lt;script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.js"&gt;&lt;/script&gt;</div>
								<p>
								<strong>Method 3:</strong> Load via requireJS/AMD loader</p>
							</div>
							<div class="workaround-item">
								<h4>✨ GSAP Animation Alternatives</h4>
								<p>
								<strong>Try:</strong> Anime.js (lighter alternative)</p>
								<div class="code-block">&lt;script src="https://cdn.jsdelivr.net/npm/animejs@3.2.1/lib/anime.min.js"&gt;&lt;/script&gt;</div>
								<p>
								<strong>Or:</strong> Use CSS animations with Web Animations API</p>
								<p>
								<strong>Older GSAP:</strong> Try TweenMax from GSAP 2.x</p>
								<div class="code-block">&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/2.1.3/TweenMax.min.js"&gt;&lt;/script&gt;</div>
							</div>
							<div class="workaround-item">
								<h4>📈 D3.js Workarounds</h4>
								<p>
								<strong>Method 1:</strong> Load individual D3 modules</p>
								<div class="code-block">&lt;script src="https://d3js.org/d3-selection.v3.min.js"&gt;&lt;/script&gt;</div>
								<p>
								<strong>Method 2:</strong> Try v5 or v6 (older versions)</p>
								<div class="code-block">&lt;script src="https://d3js.org/d3.v6.min.js"&gt;&lt;/script&gt;</div>
								<p>
								<strong>Alternative:</strong> Use Plotly.js or ApexCharts for simpler charts</p>
							</div>
							<div class="workaround-item">
								<h4>🎨 Three.js Loading Strategy</h4>
								<p>
								<strong>Try older version:</strong> r110 or earlier</p>
								<div class="code-block">&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/110/three.min.js"&gt;&lt;/script&gt;</div>
								<p>
								<strong>Note:</strong> Newer versions use ES6 modules which may be blocked</p>
							</div>
							<div class="workaround-item">
								<h4>🔧 General Workaround Strategies</h4>
								<p>1. <strong>Try IIFE builds</strong> instead of UMD/ESM formats</p>
								<p>2. <strong>Use older library versions</strong> (pre-ES6 modules)</p>
								<p>3. <strong>Load via AMD/RequireJS</strong> wrapper</p>
								<p>4. <strong>Inject via SPFx web part</strong> (bypasses some restrictions)</p>
								<p>5. <strong>Use Microsoft 365 CDN</strong> for better compatibility</p>
								<p>6. <strong>Test different CDN providers</strong> (cdnjs, unpkg, jsdelivr)</p>
							</div>
						</div>
					</div>
					<div class="working-list" id="workingList" style="display: none;">
						<h2 style="color: #4caf50; margin: 0 0 15px 0;">✅ Confirmed Working CDNs</h2>
						<div id="workingCDNs">
						</div>
					</div>
					<div class="info-box">
						<h3>📚 Testing Methodology</h3>
						<ul>
							<li>Each CDN is loaded dynamically and tested for library availability</li>
							<li>5-second timeout per test to handle slow/blocked resources</li>
							<li>Tests check for global object existence after load</li>
							<li>Workarounds include alternative versions, different CDN providers, and loading strategies</li>
							<li>Results reflect Modern SharePoint page restrictions (not SPFx)</li>
						</ul>
					</div>
				</div>
				<script>
        const cdnTests = [
            // Chart.js variations
            { name: 'Chart.js 4.x UMD (cdnjs)', url: 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.0/chart.umd.min.js', type: 'js', test: () => typeof Chart !== 'undefined', category: 'charts' },
            { name: 'Chart.js 4.x standalone', url: 'https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.js', type: 'js', test: () => typeof Chart !== 'undefined', category: 'charts', badge: 'workaround' },
            { name: 'Chart.js 3.x', url: 'https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js', type: 'js', test: () => typeof Chart !== 'undefined', category: 'charts', badge: 'workaround' },
            { name: 'Chart.js 2.x', url: 'https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js', type: 'js', test: () => typeof Chart !== 'undefined', category: 'charts', badge: 'workaround' },
            
            // D3.js variations
            { name: 'D3.js 7.x (cdnjs)', url: 'https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js', type: 'js', test: () => typeof d3 !== 'undefined', category: 'charts' },
            { name: 'D3.js 6.x', url: 'https://d3js.org/d3.v6.min.js', type: 'js', test: () => typeof d3 !== 'undefined', category: 'charts', badge: 'workaround' },
            { name: 'D3.js 5.x', url: 'https://d3js.org/d3.v5.min.js', type: 'js', test: () => typeof d3 !== 'undefined', category: 'charts', badge: 'workaround' },
            
            // Chart alternatives
            { name: 'ApexCharts', url: 'https://cdn.jsdelivr.net/npm/apexcharts', type: 'js', test: () => typeof ApexCharts !== 'undefined', category: 'charts', badge: 'alternative' },
            { name: 'Plotly.js', url: 'https://cdn.plot.ly/plotly-2.27.0.min.js', type: 'js', test: () => typeof Plotly !== 'undefined', category: 'charts', badge: 'alternative' },
            { name: 'ECharts', url: 'https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js', type: 'js', test: () => typeof echarts !== 'undefined', category: 'charts', badge: 'alternative' },
            { name: 'Highcharts', url: 'https://code.highcharts.com/highcharts.js', type: 'js', test: () => typeof Highcharts !== 'undefined', category: 'charts', badge: 'alternative' },
            { name: 'Google Charts', url: 'https://www.gstatic.com/charts/loader.js', type: 'js', test: () => typeof google !== 'undefined' && google.charts, category: 'charts', badge: 'alternative' },
            
            // GSAP variations
            { name: 'GSAP 3.x (cdnjs)', url: 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js', type: 'js', test: () => typeof gsap !== 'undefined', category: 'animation' },
            { name: 'GSAP 3.x (unpkg)', url: 'https://unpkg.com/gsap@3.12.5/dist/gsap.min.js', type: 'js', test: () => typeof gsap !== 'undefined', category: 'animation' },
            { name: 'GSAP 2.x TweenMax', url: 'https://cdnjs.cloudflare.com/ajax/libs/gsap/2.1.3/TweenMax.min.js', type: 'js', test: () => typeof TweenMax !== 'undefined', category: 'animation', badge: 'workaround' },
            
            // Animation alternatives
            { name: 'Anime.js', url: 'https://cdn.jsdelivr.net/npm/animejs@3.2.1/lib/anime.min.js', type: 'js', test: () => typeof anime !== 'undefined', category: 'animation', badge: 'alternative' },
            { name: 'Velocity.js', url: 'https://cdn.jsdelivr.net/npm/velocity-animate@1.5.2/velocity.min.js', type: 'js', test: () => typeof Velocity !== 'undefined', category: 'animation', badge: 'alternative' },
            { name: 'AOS JS', url: 'https://unpkg.com/aos@2.3.4/dist/aos.js', type: 'js', test: () => typeof AOS !== 'undefined', category: 'animation' },
            { name: 'AOS CSS', url: 'https://unpkg.com/aos@2.3.4/dist/aos.css', type: 'css', test: () => document.querySelector('link[href*="aos"]') !== null, category: 'animation' },
            { name: 'Animate.css', url: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css', type: 'css', test: () => document.querySelector('link[href*="animate"]') !== null, category: 'animation', badge: 'alternative' },
            
            // Three.js variations
            { name: 'Three.js r128 (cdnjs)', url: 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js', type: 'js', test: () => typeof THREE !== 'undefined', category: 'animation' },
            { name: 'Three.js r128 (unpkg)', url: 'https://unpkg.com/three@0.128.0/build/three.min.js', type: 'js', test: () => typeof THREE !== 'undefined', category: 'animation' },
            { name: 'Three.js r110 (older)', url: 'https://cdnjs.cloudflare.com/ajax/libs/three.js/110/three.min.js', type: 'js', test: () => typeof THREE !== 'undefined', category: 'animation', badge: 'workaround' },
            
            // Lodash
            { name: 'Lodash (cdnjs)', url: 'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js', type: 'js', test: () => typeof _ !== 'undefined', category: 'utilities' },
            { name: 'Lodash (unpkg)', url: 'https://unpkg.com/lodash@4.17.21/lodash.min.js', type: 'js', test: () => typeof _ !== 'undefined', category: 'utilities' },
            
            // jQuery
            { name: 'jQuery 3.x (cdnjs)', url: 'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js', type: 'js', test: () => typeof jQuery !== 'undefined', category: 'utilities' },
            { name: 'jQuery (Microsoft)', url: 'https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.7.1.min.js', type: 'js', test: () => typeof jQuery !== 'undefined', category: 'utilities' },
            
            // Date/Time libraries
            { name: 'Moment.js 2.x', url: 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment.min.js', type: 'js', test: () => typeof moment !== 'undefined', category: 'utilities' },
            { name: 'Day.js', url: 'https://cdn.jsdelivr.net/npm/dayjs@1.11.10/dayjs.min.js', type: 'js', test: () => typeof dayjs !== 'undefined', category: 'utilities', badge: 'alternative' },
            { name: 'Luxon', url: 'https://cdn.jsdelivr.net/npm/luxon@3.4.4/build/global/luxon.min.js', type: 'js', test: () => typeof luxon !== 'undefined', category: 'utilities', badge: 'alternative' },
            { name: 'date-fns', url: 'https://cdn.jsdelivr.net/npm/date-fns@3.0.0/index.min.js', type: 'js', test: () => typeof dateFns !== 'undefined', category: 'utilities', badge: 'alternative' },
            
            // HTTP clients
            { name: 'Axios 1.x', url: 'https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.5/axios.min.js', type: 'js', test: () => typeof axios !== 'undefined', category: 'utilities' },
            { name: 'Axios 0.x', url: 'https://cdn.jsdelivr.net/npm/axios@0.27.2/dist/axios.min.js', type: 'js', test: () => typeof axios !== 'undefined', category: 'utilities', badge: 'workaround' },
            
            // Other utilities
            { name: 'Underscore.js', url: 'https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.13.6/underscore-min.js', type: 'js', test: () => typeof _ !== 'undefined', category: 'utilities', badge: 'alternative' },
            { name: 'Ramda', url: 'https://cdn.jsdelivr.net/npm/ramda@0.29.1/dist/ramda.min.js', type: 'js', test: () => typeof R !== 'undefined', category: 'utilities', badge: 'alternative' },
            { name: 'PapaParse (CSV)', url: 'https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js', type: 'js', test: () => typeof Papa !== 'undefined', category: 'utilities', badge: 'new' },
// Other utilities
{ name: 'PapaParse (CSV)', url: 'https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js', type: 'js', test: () => typeof Papa !== 'undefined', category: 'utilities', badge: 'new' },
{ name: 'SheetJS (Excel)', url: 'https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js', type: 'js', test: () => typeof XLSX !== 'undefined', category: 'utilities', badge: 'new' }

        ];

        // Utility function to create a CDN card
        function createCDNCard(cdn) {
            const card = document.createElement('div');
            card.className = 'cdn-card pending';
            card.innerHTML = `
                <div class="cdn-header">
				<div class="cdn-name">${cdn.name}</div>
                    ${cdn.badge ? `<div class="cdn-badge badge-${cdn.badge}">${cdn.badge}</div>` : ''}
                </div>
				<div class="cdn-url">${cdn.url}</div>
				<div class="cdn-status status-pending">
					<span class="spinner">
					</span> Pending</div>
            `;
            return card;
        }

        // Render all CDN cards
        const cdnGrid = document.getElementById('cdnGrid');
        cdnTests.forEach(cdn => {
            const card = createCDNCard(cdn);
            cdnGrid.appendChild(card);
        });

        // Test all CDNs
        async function testCDNs() {
            let total = 0, success = 0, failed = 0, pending = 0;

            const cards = Array.from(document.querySelectorAll('.cdn-card'));
            for (let i = 0; i < cdnTests.length; i++) {
                const cdn = cdnTests[i];
                const card = cards[i];
                pending++;
                updateCounters(total, success, failed, pending);

                try {
                    await new Promise((resolve, reject) => {
                        const script = document.createElement('script');
                        script.src = cdn.url;
                        script.onload = () => {
                            if (cdn.test()) {
                                card.className = 'cdn-card success';
                                card.querySelector('.cdn-status').className = 'cdn-status status-success';
                                card.querySelector('.cdn-status').innerText = '✅ Working';
                                success++;
                            } else {
                                card.className = 'cdn-card failed';
                                card.querySelector('.cdn-status').className = 'cdn-status status-failed';
                                card.querySelector('.cdn-status').innerText = '❌ Failed';
                                failed++;
                            }
                            pending--;
                            total++;
                            updateCounters(total, success, failed, pending);
                            resolve();
                        };
                        script.onerror = () => {
                            card.className = 'cdn-card failed';
                            card.querySelector('.cdn-status').className = 'cdn-status status-failed';
                            card.querySelector('.cdn-status').innerText = '❌ Failed';
                            failed++;
                            pending--;
                            total++;
                            updateCounters(total, success, failed, pending);
                            resolve();
                        };
                        document.body.appendChild(script);
                    });
                } catch (e) {
                    console.error(e);
                }
            }
        }

        function updateCounters(total, success, failed, pending) {
            document.getElementById('totalCount').innerText = total;
            document.getElementById('successCount').innerText = success;
            document.getElementById('failedCount').innerText = failed;
            document.getElementById('pendingCount').innerText = pending;
            const rate = total === 0 ? 0 : Math.round((success / total) * 100);
            document.getElementById('successRate').innerText = rate + '%';
            document.getElementById('progressBar').style.width = (total / cdnTests.length * 100) + '%';
        }

        // Button events
        document.getElementById('testAllBtn').addEventListener('click', () => testCDNs());
        document.getElementById('retryFailedBtn').addEventListener('click', () => {
            const failedCDNs = cdnTests.filter((_, i) => {
                const card = document.querySelectorAll('.cdn-card')[i];
                return card.classList.contains('failed');
            });
            // Re-test only failed
            // (reuse testCDNs function logic but for filtered list)
            console.log('Retry failed CDNs:', failedCDNs);
        });

        // Tab switching
        const tabs = document.querySelectorAll('.tab');
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                tabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                document.querySelectorAll('.tab-content').forEach(tc => tc.classList.remove('active'));
                document.getElementById(tab.dataset.tab + 'Tab').classList.add('active');
            });
        });

        // Filter buttons
        const filters = document.querySelectorAll('.filter-btn');
        filters.forEach(btn => {
            btn.addEventListener('click', () => {
                filters.forEach(f => f.classList.remove('active'));
                btn.classList.add('active');
                const filter = btn.dataset.filter;
                document.querySelectorAll('.cdn-card').forEach(card => {
                    if (filter === 'all') card.style.display = '';
                    else if (filter === 'success' && card.classList.contains('success')) card.style.display = '';
                    else if (filter === 'failed' && card.classList.contains('failed')) card.style.display = '';
                    else if (filter === 'pending' && card.classList.contains('pending')) card.style.display = '';
                    else card.style.display = 'none';
                });
            });
        });
    </script>
				</body>
			</html>
